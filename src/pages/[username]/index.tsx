import { type NextPage } from 'next';
import { useRouter } from 'next/router';
import { api } from '~/utils/api';
import Layout from '~/components/Layout';
import { AiOutlineArrowLeft } from 'react-icons/ai';
import Link from 'next/link';
import Image from 'next/image';
import Button from '~/components/Button';
import { useAuth } from '@clerk/nextjs';
import Head from 'next/head';
import LoadingPage from '~/components/LoadingPage';
import { useMemo, useState } from 'react';
import PostsList from '~/components/PostsList';
import Page404 from '../404';
import EditProfileModal from '~/components/EditProfileModal';

/*export const getServerSideProps: GetServerSideProps = async context => {
    const ssg = createServerSideHelpers({
        router: appRouter,
        ctx: { prisma, auth: getAuth(context.req), ip: context.req.headers['x-forwarded-for'] },
        transformer: superjson,
    });

    const username = context.params?.username;

    if (typeof username !== 'string') {
        throw new Error('Invalid username');
    }

    await Promise.all([ssg.users.get.prefetch({ username }), ssg.users.getCurrent.prefetch()]);

    return {
        props: {
            trpcState: ssg.dehydrate(),
        },
    };
};*/

const ProfilePage: NextPage = () => {
    const auth = useAuth();
    const getCurrentUser = api.users.getCurrent.useQuery(undefined, { enabled: auth.isSignedIn });
    const router = useRouter();
    const username = router.query.username as string;
    const getUser = api.users.get.useQuery({ username }, { enabled: router.isReady });
    const getUserPosts = api.posts.getUserPosts.useQuery({ username }, { enabled: router.isReady });

    const postsNumber = useMemo(() => getUserPosts.data?.length || 0, [getUserPosts.data?.length]);

    const [isEditing, setIsEditing] = useState(false);

    const PageHead = useMemo(
        () => (
            <Head>
                <title>{router.query.username ? `${router.query.username as string} - Twitty` : 'Twitty'}</title>
                <meta name='description' content='Generated by create-t3-app' />
                <link rel='icon' href='/favicon.svg' />
            </Head>
        ),
        [router.query.username]
    );

    if (getUser.isError && getUser.error.data?.httpStatus === 404) {
        return <Page404 />;
    }

    if (!auth.isLoaded || getUser.isLoading || getCurrentUser.isLoading) {
        return <LoadingPage>{PageHead}</LoadingPage>;
    }

    return (
        <>
            {PageHead}
            <Layout>
                <div className='h-13 flex items-center border-[1px] border-t-0 border-solid border-gray-200'>
                    <Link
                        href='/'
                        className='ml-2 mr-6 rounded-full p-2 transition-colors duration-200 hover:bg-gray-200'
                    >
                        <AiOutlineArrowLeft />
                    </Link>
                    <div className='flex flex-col justify-evenly'>
                        <h1 className='text-xl font-semibold'>{getUser.data?.username}</h1>
                        <p className='text-sm text-gray-600'>
                            {postsNumber > 1 ? `${postsNumber} twitts` : `${postsNumber} twitt`}
                        </p>
                    </div>
                </div>
                <div className='border-[1px] border-t-0 border-solid border-gray-200'>
                    <div className='p-4'>
                        <div className='flex items-center justify-between'>
                            <Image
                                src={getUser.data?.avatar as string}
                                alt='Profile Picture'
                                width={120}
                                height={120}
                                className='h-[120px] w-[120px] rounded-full object-cover object-center'
                            />
                            {getCurrentUser.data && getCurrentUser.data?.id === getUser.data?.id && (
                                <div>
                                    <Button onClick={() => setIsEditing(true)}>Edit profile</Button>
                                </div>
                            )}
                        </div>
                        <div className='mt-3'>
                            <h1 className='text-xl font-bold'>{getUser.data?.username}</h1>
                            <p className='text-sm text-gray-500'>@{getUser.data?.username}</p>
                        </div>
                    </div>
                </div>
                <div className={getUserPosts.isLoading ? '' : 'border-x-[1px] border-solid border-gray-200'}>
                    <PostsList posts={getUserPosts.data} isLoading={getUserPosts.isLoading} />
                </div>
            </Layout>
            {isEditing && <EditProfileModal setIsEditing={setIsEditing} user={getCurrentUser.data} />}
        </>
    );
};

export default ProfilePage;

import { type NextPage } from 'next';
import { useRouter } from 'next/router';
import Layout from '~/components/Layout';
import LoadingPage from '~/components/LoadingPage';
import { api } from '~/utils/api';
import Page404 from '../404';
import Link from 'next/link';
import { useAuth } from '@clerk/nextjs';
import Head from 'next/head';
import TextAreaAutoSize from 'react-textarea-autosize';
import NextImage from 'next/image';
import { useState } from 'react';
import { toast } from 'react-hot-toast';
import CommentsList from '~/components/CommentsList';
import Post from '~/components/Post';

const OnePost: NextPage = () => {
    const auth = useAuth();
    const router = useRouter();
    const context = api.useContext();
    const [username, postId] = [router.query.username, router.query.postId] as [string, string];
    const [replyContent, setReplyContent] = useState('');

    const getPost = api.posts.getOne.useQuery({ postId }, { enabled: !!postId });
    const getCurrentUser = api.users.getCurrent.useQuery(undefined, { enabled: auth.isSignedIn });
    const getComments = api.comments.getAllForPost.useQuery({ postId }, { enabled: !!postId });

    const createComment = api.comments.create.useMutation({
        onSuccess: () => {
            setReplyContent('');
            void context.comments.getAllForPost.invalidate({ postId: getPost.data?.id as string });
        },
        onMutate: async ({ content, postId }) => {
            const previousComments = context.comments.getAllForPost.getData({ postId });
            const previousContent = replyContent;
            if (getCurrentUser.data) {
                setReplyContent('');
                await context.comments.getAllForPost.cancel({ postId });
                context.comments.getAllForPost.setData({ postId }, old => {
                    return [
                        {
                            id: 'optimistic',
                            content,
                            author: getCurrentUser.data,
                            postId,
                            authorId: getCurrentUser.data.id,
                            createdAt: new Date(),
                        },
                        ...(old || []),
                    ];
                });
            }
            return { previousComments, previousContent };
        },
        onError: (err, variables, previousState) => {
            toast.error(err.message);
            setReplyContent(previousState?.previousContent as string);
            context.comments.getAllForPost.setData({ postId: variables.postId }, previousState?.previousComments);
        },
    });

    if (getPost.isLoading || getComments.isLoading || !auth.isLoaded || !username || !postId) {
        return <LoadingPage />;
    }

    if (getPost.isError) {
        return <Page404 />;
    }

    if (getPost.data.author.username !== username) {
        void router.push(`/${getPost.data.author.username}/${getPost.data.id}`);
        return <LoadingPage />;
    }

    return (
        <>
            <Head>
                <title>
                    {router.query.username && getPost.data?.content
                        ? `${router.query.username as string} on Twitty: ${
                              getPost.data.content.length < 20
                                  ? `"${getPost.data.content.slice(0, 20)}"`
                                  : `"${getPost.data.content.slice(0, 20)}..."`
                          }`
                        : 'Twitty'}
                </title>
                <meta name='description' content='Generated by create-t3-app' />
                <link rel='icon' href='/favicon.svg' />
            </Head>
            <Layout>
                <div className='border-x-[1px] border-solid border-gray-200'>
                    <Post post={{ ...getPost.data, _count: { comments: getComments.data?.length as number } }} />
                </div>

                {auth.isSignedIn && (
                    <form
                        className='border-x-[1px] border-b-[1px] border-solid border-gray-200 p-4'
                        onSubmit={e => {
                            e.preventDefault();
                            createComment.mutate({ content: replyContent, postId: getPost.data.id });
                        }}
                    >
                        <div className='flex justify-between'>
                            <Link href={`/${getCurrentUser.data?.username as string}`}>
                                <NextImage
                                    src={getCurrentUser.data?.avatar as string}
                                    alt='Default user image'
                                    width={48}
                                    height={48}
                                    className='mr-3 h-12 w-12 rounded-full'
                                />
                            </Link>
                            <TextAreaAutoSize
                                value={replyContent}
                                onChange={e => setReplyContent(e.currentTarget.value)}
                                placeholder='Tweet you reply'
                                className='mt-2.5 w-[424px] resize-none text-xl placeholder-gray-600 outline-none'
                                minLength={1}
                                maxLength={280}
                                required
                            />
                            <div className='ml-3'>
                                <button
                                    className='flex items-center rounded-full bg-blue-500 px-4 py-2 font-medium text-white disabled:bg-blue-200'
                                    type='submit'
                                    disabled={replyContent.length === 0}
                                >
                                    Reply
                                </button>
                            </div>
                        </div>
                    </form>
                )}
                {getComments.data && getComments.data.length > 0 && (
                    <div className='border-x-[1px] border-solid border-gray-200'>
                        <h2 className='border-b-[1px] border-solid border-gray-200 p-4 text-lg font-medium'>
                            Replies to{' '}
                            <Link className='text-blue-500' href={`/${getPost.data.author.username}`}>
                                @{getPost.data.author.username}
                            </Link>{' '}
                            :
                        </h2>
                        <CommentsList
                            comments={getComments.data}
                            isLoading={getComments.isLoading}
                            postId={getPost.data.id}
                        />
                    </div>
                )}
            </Layout>
        </>
    );
};
export default OnePost;

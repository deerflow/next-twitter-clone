import { type NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { api } from '~/utils/api';
import TextAreaAutoSize from 'react-textarea-autosize';
import { useAuth } from '@clerk/nextjs';
import Layout from '~/components/Layout';
import PostsList from '~/components/PostsList';
import LoadingPage from '~/components/LoadingPage';
import Link from 'next/link';
import toast from 'react-hot-toast';
import { fileToBase64 } from 'deerflow-utils';
import NextImage from 'next/image';

import { type FC } from 'react';
import { AiOutlineClose, AiOutlineFileImage } from 'react-icons/ai';

const PageHead: FC = () => {
    return (
        <Head>
            <title>Twitty</title>
            <meta name='description' content='Generated by create-t3-app' />
            <link rel='icon' href='/favicon.svg' />
        </Head>
    );
};

const Home: NextPage = () => {
    const auth = useAuth();
    const context = api.useContext();

    const getCurrentUser = api.users.getCurrent.useQuery(undefined, { enabled: auth.isSignedIn });
    const getPosts = api.posts.getAll.useQuery();
    const createPost = api.posts.create.useMutation({
        onSuccess: () => {
            setContent('');
            setUploadedImage('');
            setUploadedImageHeight(null);
            void context.posts.getAll.invalidate();
        },
        onMutate: async () => {
            const previousPosts = context.posts.getAll.getData();
            if (getCurrentUser.data) {
                await context.posts.getAll.cancel();
                context.posts.getAll.setData(undefined, old => {
                    if (!old) return old;
                    return [
                        {
                            author: {
                                username: getCurrentUser.data.username,
                                id: getCurrentUser.data.id,
                                email: getCurrentUser.data.email,
                                avatar: getCurrentUser.data.avatar,
                            },
                            id: 'optimistic',
                            content,
                            createdAt: new Date(),
                            image:
                                uploadedImage && uploadedImageHeight
                                    ? {
                                          url: uploadedImage,
                                          height: uploadedImageHeight,
                                          width: 568,
                                          id: 'optimistic',
                                          blurDataUrl: '',
                                          createdAt: new Date(),
                                          fileId: 'optimistic',
                                      }
                                    : null,
                            _count: {
                                comments: 0,
                            },
                        },
                        ...old,
                    ];
                });
            }
            return previousPosts;
        },
        onError: (err, _variables, previousPosts) => {
            toast.error(err.message);
            context.posts.getAll.setData(undefined, previousPosts);
        },
    });

    const [content, setContent] = useState('');
    const [uploadedImage, setUploadedImage] = useState<string | null>(null);
    const [uploadedImageHeight, setUploadedImageHeight] = useState<number | null>(null);

    const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.currentTarget.files?.[0];
        if (file) {
            const base64 = await fileToBase64(file);
            const preloadImage = new Image();
            preloadImage.src = base64 as string;
            preloadImage.onload = () => {
                setUploadedImageHeight(Math.round((preloadImage.height / preloadImage.width) * 600));
                setUploadedImage(base64 as string);
            };
        }
    };

    if (!auth.isLoaded || getCurrentUser.isLoading)
        return (
            <LoadingPage>
                <PageHead />
            </LoadingPage>
        );

    return (
        <>
            <PageHead />
            <Layout>
                <div className='w-[600px]'>
                    {auth.isSignedIn && (
                        <form
                            onSubmit={e => {
                                e.preventDefault();
                                if (uploadedImage) {
                                    console.log('image');
                                    if (!uploadedImageHeight)
                                        return toast.error('Image does not have required field height');
                                    createPost.mutate({
                                        content,
                                        imageSrc: uploadedImage,
                                        imageHeight: uploadedImageHeight,
                                        imageWidth: 568,
                                    });
                                } else {
                                    createPost.mutate(
                                        { content },
                                        {
                                            onSuccess: () => {
                                                setContent('');
                                                void context.posts.getAll.invalidate();
                                            },
                                            onError: e => toast.error(e.message),
                                        }
                                    );
                                }
                            }}
                        >
                            <div className='border-x-[1px] border-solid border-gray-200 p-4'>
                                <div className='flex justify-between'>
                                    <Link href={`/${getCurrentUser.data?.username as string}`}>
                                        <NextImage
                                            src={getCurrentUser.data?.avatar as string}
                                            alt='Default user image'
                                            width={48}
                                            height={48}
                                            className='mr-3 h-12 w-12 rounded-full'
                                        />
                                    </Link>
                                    <TextAreaAutoSize
                                        value={content}
                                        onChange={e => setContent(e.currentTarget.value)}
                                        placeholder="What's happening?"
                                        className='mt-2.5 w-[424px] resize-none text-xl placeholder-gray-600 outline-none'
                                        minLength={1}
                                        maxLength={280}
                                        required
                                    />
                                    <div className='ml-3'>
                                        <button
                                            className='flex items-center rounded-full bg-blue-500 px-4 py-2 font-medium text-white disabled:bg-blue-200'
                                            type='submit'
                                            disabled={content.length === 0 || createPost.isLoading}
                                        >
                                            Tweet
                                        </button>
                                    </div>
                                </div>
                                {uploadedImage && uploadedImageHeight && (
                                    <div
                                        className={`relative h-[${uploadedImageHeight}px]`}
                                        style={{
                                            height: uploadedImageHeight ? uploadedImageHeight : undefined,
                                        }}
                                    >
                                        <button
                                            type='button'
                                            className='absolute left-1 top-4 z-10 rounded-full bg-gray-800 p-2 transition-colors duration-200 hover:bg-gray-700'
                                            onClick={() => {
                                                setUploadedImage(null);
                                                setUploadedImageHeight(null);
                                            }}
                                        >
                                            <AiOutlineClose color='white' />
                                        </button>
                                        <NextImage
                                            className='object-contain'
                                            src={uploadedImage}
                                            alt='Uploaded image'
                                            fill
                                        />
                                    </div>
                                )}
                            </div>
                            <div className='flex border-x-[1px] border-b-[1px] border-solid border-gray-200 px-3 pb-3'>
                                <label
                                    htmlFor='upload-image'
                                    className='block cursor-pointer rounded-full p-2 transition-colors duration-200 hover:bg-gray-200'
                                >
                                    <AiOutlineFileImage className='text-blue-5 00 h-5 w-5' />
                                    <input
                                        id='upload-image'
                                        type='file'
                                        accept='image/*'
                                        className='hidden'
                                        onChange={e => void handleImageUpload(e)}
                                    />
                                </label>
                            </div>
                        </form>
                    )}

                    <div className={getPosts.isLoading ? '' : 'border-[1px] border-y-0 border-solid'}>
                        <PostsList posts={getPosts.data} isLoading={getPosts.isLoading} clickable={true} />
                    </div>
                </div>
            </Layout>
        </>
    );
};

export default Home;

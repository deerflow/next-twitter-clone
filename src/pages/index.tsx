import { type NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { api } from '~/utils/api';
import TextAreaAutoSize from 'react-textarea-autosize';
import Image from 'next/image';
import { useAuth } from '@clerk/nextjs';
import Layout from '~/components/Layout';
import PostsList from '~/components/PostsList';
import LoadingPage from '~/components/LoadingPage';
import Spinner from '~/components/Spinner';
import Link from 'next/link';

const PageHead = () => (
    <Head>
        <title>Twitty</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.svg' />
    </Head>
);

const Home: NextPage = () => {
    const auth = useAuth();
    const context = api.useContext();

    const getCurrentUser = api.users.getCurrent.useQuery(undefined, { enabled: auth.isSignedIn });
    const getPosts = api.posts.getAll.useQuery();
    const createPost = api.posts.create.useMutation();

    const [content, setContent] = useState('');

    if (!auth.isLoaded || getCurrentUser.isLoading)
        return (
            <LoadingPage>
                <PageHead />
            </LoadingPage>
        );

    return (
        <>
            <PageHead />
            <Layout>
                <div className='w-[600px]'>
                    {auth.isSignedIn && (
                        <form
                            className='flex justify-between border-[1px] border-solid border-gray-200 p-4'
                            onSubmit={e => {
                                e.preventDefault();
                                createPost.mutate(
                                    { content },
                                    {
                                        onSuccess: () => {
                                            setContent('');
                                            void context.posts.getAll.invalidate();
                                        },
                                    }
                                );
                            }}
                        >
                            <Link href={`/${getCurrentUser.data?.username as string}`}>
                                <Image
                                    src={getCurrentUser.data?.avatar as string}
                                    alt='Default user image'
                                    width={48}
                                    height={48}
                                    className='mr-3 h-12 w-12 rounded-full'
                                />
                            </Link>
                            <TextAreaAutoSize
                                value={content}
                                onChange={e => setContent(e.currentTarget.value)}
                                placeholder="What's happening?"
                                className='mt-2.5 w-[424px] resize-none text-xl placeholder-gray-600 outline-none'
                                minLength={1}
                                maxLength={280}
                                required
                            />
                            <div className='ml-3'>
                                <button
                                    className='flex items-center rounded-full bg-blue-500 px-4 py-2 font-medium text-white disabled:bg-blue-200'
                                    type='submit'
                                    disabled={content.length === 0 || createPost.isLoading}
                                >
                                    {createPost.isLoading && <Spinner size={4} className='mr-2' />}
                                    Tweet
                                </button>
                            </div>
                        </form>
                    )}

                    <div className={getPosts.isLoading ? '' : 'border-[1px] border-y-0 border-solid'}>
                        <PostsList posts={getPosts.data} isLoading={getPosts.isLoading} />
                    </div>
                </div>
            </Layout>
        </>
    );
};

export default Home;
